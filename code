 #include <avr/io.h> // antet pentru a activa controlul fluxului de date asupra pinii

#define F_CPU 1000000  //se transmite frecventa controller-ului de cristal atasat

#include <util/delay.h> // antet pentru a activa funcția de întârziere în program

#define    E   5 //  setarea numelui „enable” pentru cel de-al 5-lea pin al PORTD, deoarece este conectat la pinul de enable al LCD

#define RS  6 // setarea numelui „enable” pentru cel de-al 6-lea pin al PORTD, deoarece este conectat la pinul RS al LCD

void send_a_command(unsigned char command);

void send_a_character(unsigned char character);

void send_a_string(char *string_of_characters);    

int main(void)

{

DDRB = 0xFF; // setare portB și portD ca pini de ieșire

DDRD = 0xFF;

_delay_ms(50);// delay de 50ms

DDRA = 0;// setare portA ca input

ADMUX |=(1<<REFS0)|(1<<REFS1);// stabilirea referinței ADC

ADCSRA |=(1<<ADEN)|(1<<ADATE)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);

// activarea ADC, setarea modului de rulare liberă, setarea prescalarului 128

int16_t COUNTA = 0;// stocarea ieșirii digitale

char SHOWA [3];// afișează ieșirea digitală ca temperatură în 16*2 lcd

send_a_command(0x01); //clear screen 0x01 = 00000001

_delay_ms(50);

send_a_command(0x38);// transmitem lcd-ului că folosim comanda pe 8 biți /data mode

_delay_ms(50);

send_a_command(0b00001111);//  LCD SCREEN ON și cursorul clipește

ADCSRA |=(1<<ADSC);// pornim conversia ADC

while(1)

{

COUNTA = ADC/4; // deoarece rezoluția (2,56/2^10 = 0,0025) este de 2,5 mV, va exista o creștere de 4 pentru fiecare intrare de 10 mV, ceea ce înseamnă că pentru fiecare creștere de grad va exista o creștere de 4 în valoare digitală. Deci, pentru a obține temperatura, trebuie să împărțim ieșirea ADC la patru.
send_a_string ("Proiect Plachta");//  afișare nume 

send_a_command(0x80 + 0x40 + 0); // deplasarea cursorului pe prima "shell" din a doua linie 

send_a_string ("Temp(C)=");// afișare mnume

send_a_command(0x80 + 0x40 + 8); // deplasarea cursorului pe al 9-lea "shell" din a doua linie 

itoa(COUNTA,SHOWA,10); // comandă pentru punerea unui număr variabil în LCD (număr variabil, în ce caracter să înlocuiți, care bază este variabilă (zece aici, deoarece numărăm numărul în baza 10))

send_a_string(SHOWA); // transmitem afișajului să arate caracterul (înlocuit cu un număr variabil) al primei persoane după poziționarea cursei pe LCD

send_a_string ("      ");

send_a_command(0x80 + 0);// revenind la prima linie din primul shell

}

}

void send_a_command(unsigned char command)

{

PORTA = command;

PORTD &= ~ (1<<RS); // punem 0 în RS pentru a spune lcd-ului că trimitem comanda

PORTD |= 1<<E; // transmitem lcd-ului să primească comanda/date la port

 _delay_ms(50);

PORTD &= ~1<<E;// transmitem lcd-ului că am finalizat trimiterea datelor

PORTA= 0;

}

void send_a_character(unsigned char character)

{

PORTA= character;

PORTD |= 1<<RS;// transmitem LCD-ului că trimitem date, nu comenzi

PORTD |= 1<<E;// transmitem LCD-ului să înceapă să primească comenzi/date

_delay_ms(50);

PORTD &= ~1<<E;// trasnmitem lcd că am finalizat trimiterea datelor/comandei

PORTA = 0;

}

void send_a_string(char *string_of_characters)

{

while(*string_of_characters > 0)

{

send_a_character(*string_of_characters++);

}

}
